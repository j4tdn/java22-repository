FOP : chia bài toán thành các hàm
	:chứa dl chung, common data
	:ko có access modifier, hàm nào cũng dùng đc
OOP : chia bài toán thành các đối tượng
	: mỗi đối tượng quản lí thuộc tính, phương thức riêng
	:thông qua access modifier

A. Lý thuyết
Chương trình hướng đối tượng -- OOP
--> Chia bài toán thành nhiều đối tượng
-->Đối tượng: thuộc tính và phương thức

B. Thực hành 
? Làm sao để tạo ra đối tượng, đối tượng là gì?
Table --> Class(Id,chatlieu,soluong)
->Tạo ra các đối tượng(ban 1, ban 2, ban 3)

Table --> Object()
->Table thuộc class Stuff(id,name,position)
->ban,ghe,choi,cap....

---------------------------------
1. Vì sao các thuộc tính trong class theo OOP nên cho private rồi sử dụng getter,
để get/set thông tin mà ko dùng public để code ngắn gọn?
	+Nếu để public --> các thuộc tính đc phép truy cập từ mọi nơi giống như data của FOP,
	ko đúng với idea của OOP(quản lí dữ liệu từng đối tượng)
	-->FOP: public all --> public cho toàn bộ
	-->OOP: private --> quản lí riêng từng object
		  : nếu lỗi thì lỗi cho từng đối tượng ko ảnh hưởng các đối tượng hàm của class
	+ public cho getter/setter method khác với public cho attribute
	--> public attribute: bên ngoài gọi đến đc trực tiếp thuộc tính biết đc
		+ cấu trúc dữ liệu của thuộc tính
		+ giá trị của thuộc tính
	--> public getter/setter: bên ngoài truy cập thông qua hàm
		+tùy chức năng mà mình cho phép bên ngoài get toàn bộ/1 phần/cập nhật dữ liệu của thuộc tính
	
	2*--> truy cập get/set 1 phần, toàn bộ dữ liệu của thuộc tính mà hoàn toàn ko biết được giá trị thực tế
	của thuộc tính là bao nhiêu
	
	3* --> ko đc phép cập nhật cấu trúc dữ liệu của thuộc tính trong class
	
	VD:Nhanvien nhận lương ở công ty
	
	Class Company{
		private double balance; //quỹ lương của công ty
		private String name; //tên công ty
		private List<Employee> employees = new ArrayList<>(); //dynamic list
		
		public void setName(String name){
			this.name = name;
		}
		
		void paySal(employee){
			balance = balance - employee.getSalary()
		}
	}
	
	Class Employee{
		String name;
		double salary; //mức lương
		
		double money;
		
		
	}
	
	//giải lập cuối tháng