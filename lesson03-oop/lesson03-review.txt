FOP: chia bài toán thành các hàm
   : chứa dữ liệu chung, common data
   : không có access modifier, hàm nào dùng cũng được
   
OOP: Chia bài toán thành các đối tượng
   : Mỗi đối tượng(class) quản lý thuộc tính,
   : Thông qua access modifier
      

A. Lý thuyết
Chương trình hướng đối tượng - OOP
--> Chia bài toán thành nhiều các đối tượng
--> Đối tượng: thuộc tính và phương thức

B. Thực hành
? Làm sao để tạo ra đối tượng, đối tượng là gì?


----------------------------------------
1. Vì sao các thuộc tính trong class theo OOP nên cho private rồi sử dụng 
để get/set thông tin mà không dùng public để code ngắn gọn ?

1* + Nếu để public --> các thuộc tính được phép truy cập từ mọi nơi giống như data của FOP, không đúng 
với idea của OOP(quản lý dữ liệu cho từng đối tượng)
 --> FOP: public all --> public cho toàn bộ
 --> OOP: private --> quản lý riêng cho từng object
 		: nếu lỗi thì lỗi cho từng đối tượng ko ảnh hưởng các đối tượng hàm của class khác

+ public cho getter/setter method khác với public cho attribute		
 --> public attribute: bên ngoài gọi đến được trực tiếp thuộc tính biết được 
   + cấu trúc dữ liệu của thuộc tính
   + giá trị của thuộc tính
 
--> public getter/setter: bên ngoài truy cập thông qua hàm
	+ tùy chức năng mà mình cho phép bên ngoài get toàn bộ/1 phần/cập nhật dữ liệu của thuộc tính

2* --> truy cập get/set 1 phần, toàn bộ dữ liệu của thuộc tính mà hoàn toán ko biết được giá trị thực tế
của thuộc tính là bao nhiêu

3* --> ko được phép cập nhật cấu trúc dữ liệu của thuộc tính trong class
	   