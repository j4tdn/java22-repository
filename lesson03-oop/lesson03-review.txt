FOP: Chia bài toán thành các hàm
   : Chứa dữ liệu chung, common data
   : Không có access modifier, hàm nào dùng cũng được
   
OOP: Chia bài toán thành các đối tượng(class)
   : Mỗi đối tượng(class) quản lý thuộc tính, phương thức riêng
   : thông qua access modifier	


A. Lý thuyết
Chương trình hướng đối tượng - OOP
--> Chia bài toán thành nhiều đối tượng trong đó
--> Đối tượng gồm các thuộc tính (attributes) và phương thức


B. Thực hành 
? Làm sao để tạo ra đối tượng, đối tượng là gì ?
Đối tượng (Object): là một khái niệm dùng để mô tả các thực thể tồn tại trong thế giới thực
					chứa giá trị cụ thể và phân biệt được với các đối tượng khác
				VD: Student là một class
					Student A là một thể hiện - đối tượng của class Stundent
Class là một khái niệm trừu tượng để chị tập hợp các đối tượng (Ojbject) có chung:
	- tính chất: thuộc tính -- hành vi: phương thức
Mỗi đối tượng có giá trị của thuộc tính, phương thức khác nhau

------------------------------------
1. Vì sao các thuộc tính trong class theo OOP nên cho private rồi sử dụng getter, setter
để get/set thông tin mà ko dùng pub lic để code ngắn gọn ?
+ Nếu để public --> các thuộc tính được phép truy cập từ mọi nơi, giống như data của FOP. ko đúng
với idea của OOP (quản lý dữ liệu cho từng đối tượng)
  --> FOP: public all
  --> OOP: private --> quản lý riêng cho từng object
  		 : nếu lỗi thì lỗi cho từng đối tượng ko ảnh hưởng đến đối tượng hàm của class khác
+ public cho getter/setter method khác với public cho attribute
  --> public cho attribute: bên ngoài gói đến được trực tiếp thuộc tính biết được
  	  + cấu trúc dữ liệu của thuộc tính
  	  + giá trị của thuộc tính
  	  
  --> public getter/setter: bên ngoài truy cập thông qua hàm
  	  + tùy chức năng mình cho phép bên ngoài get toàn bộ/ 1 phần/ cập nhật dữ liệu của thuộc tính
  --> truy cập get/set 1 phần, toàn bộ dữ liệu của thuộc tính mà hoàn toàn ko biết được giá trị
  thực tế của thuộc tính là bao nhiêu
  --> ko được phép cập nhât cấu trúc dữ liệu của thuộc tính class