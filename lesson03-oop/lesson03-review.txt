FOP: Chia bài toán thành các hàm
   : Chứa dữ liệu chung, common data
   : Ko có access modifier, hàm nào dùng cũng được

OOP: Chia bài toán thành các dối tượng
   : Mối đối tượng(class) 


A. Lý thuyết
Chương trình hường đối tượng - OOP
--> Chia bài toán thành nhiều đối tượng 
--> Đối tượng: thuộc tính và phương thức

B. Thực hành
? Làm sao để tạo ra đối tượng, đối tượng là gì?

Table --> Class(ID, ChatLieu, KichThuoc)
  --> Tạo ra các đối tượng Ban1, Ban2, Ban3
  
Table --> Object
--> Thuộc class Stuff(id, name, position)
--> Ban, Ghe, Cap, MayQuat

TruongHoc
+ SinhVien
+ GiangVien
+ NhanVien

CoSoDuLieuQuocGia
+ CongDan


--------------------------------------------
1, Vì sao các thuộc tính trong class theo OOP nên cho private rồi sử dụng getter,setter
để get/set thông tin mà ko dùng public để code ngắn gọn?
+1*Nếu mình để public --> các thuộc tính đc phép truy cập tử mọi nơi giống data của FOP, 
ko đúng vs idea của OOP(quản lý dữ liệu cho từng đối tượng)
  -->FOP: public all --> public cho toàn bộ
  -->OOP: private --> quản lý riêng cho từng object
        : nếu lỗi thì lỗi cho từng đối tượng ko ảnh hưởng các đối tượng hàm của class khác
+ public cho getter/setter method khác với public cho attribute
 --> public attribute: bên ngoài gọi đến được trực tiếp thuộc tính biết được
    + cấu trúc dữ liệu của thuộc tính
    + giá trị của thuộc tính
    
 --> public getter/setter: bên ngoài truy cập thông qua hàm
    + tùy chức năng mà mình cho phép bên ngoài get toàn bộ/1phần/cập nhật dữ liệu của thuộc tính
    
 2*--> truy cập get/ set 1 phần hoặc toàn bộ dữ liệu của thuộc tính mà hoàn toàn ko biết được
 giá trị thực tế của thuộc tính là bao nhiêu
 
 3*-->ko dc phép cập nhật cấu trúc dữ liệu của thuộc tính trong class
 
 VD: NhanVien nhận lương ở CongTy
 
Class Company {
   private double balance: // quỹ lương của công ty
   private String name; // tên công ty
   private List